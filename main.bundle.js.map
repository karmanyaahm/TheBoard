{"version":3,"file":"main.bundle.js","mappings":"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","sources":["webpack://theboard_matrix/./src/helper.js","webpack://theboard_matrix/./src/paper-canvas.js","webpack://theboard_matrix/./src/actions.js","webpack://theboard_matrix/./src/tools/line-style-selector.js","webpack://theboard_matrix/./src/color-picker.js","webpack://theboard_matrix/./src/tools/tool-pen.js","webpack://theboard_matrix/./src/input.js","webpack://theboard_matrix/./src/tools/tool-eraser.js","webpack://theboard_matrix/./src/tools/tool-line.js","webpack://theboard_matrix/./src/tools/tool-rect.js","webpack://theboard_matrix/./src/sturctures/notebook-tree.js","webpack://theboard_matrix/./src/components/login-container.js","webpack://theboard_matrix/./src/main.js","webpack://theboard_matrix/./src/backend/matrix.js","webpack://theboard_matrix/./src/sturctures/object-store.js","webpack://theboard_matrix/./src/tools/tool-wheel.js"],"sourcesContent":["export function parsePath(p_path, objpos) {\n    let arr = p_path.split(\" \");\n    var offset = objpos.split(\" \");\n    var returnval = [];\n    for (let i = 0; i < arr.length; i += 4) {\n        let time = parseFloat(arr[i]);\n        let x = parseFloat(arr[i + 1]) + parseFloat(offset[0]);\n        let y = parseFloat(arr[i + 2]) + parseFloat(offset[1]);\n        let lineWidth = parseFloat(arr[i + 3]);\n        returnval.push([time, x, y, lineWidth]);\n    }\n    return returnval;\n}\nexport function parseBezierPath(p_path, objpos) {\n    let arr = p_path.split(\" \");\n    arr = arr.filter((e)=>e!=\"\")\n    var offset = objpos.split(\" \");\n    var returnval = [];\n    for (let i = 0; i < arr.length; i += 6) {\n        let seg = new paper.Segment(\n            new paper.Point(parseFloat(arr[i + 0]) + parseFloat(offset[0]),\n                parseFloat(arr[i + 1]) + parseFloat(offset[1])),\n            new paper.Point(parseFloat(arr[i + 2]), parseFloat(arr[i + 3])),\n            new paper.Point(parseFloat(arr[i + 4]), parseFloat(arr[i + 5])))\n        // let time = parseFloat(arr[i]);\n        // let x = parseFloat(arr[i + 1]) + parseFloat(offset[0]);\n        // let y = parseFloat(arr[i + 2]) + parseFloat(offset[1]);\n        // let lineWidth = parseFloat(arr[i + 3]);\n        returnval.push(seg);\n    }\n    return returnval;\n}\nexport function mousePathToString(points) {\n    //format:\n    // time x y width\n    let mouse_path_string = \"\";\n    for (let p of points) {\n        mouse_path_string += p[0] + \" \" + p[1] + \" \" + p[2] + \" \" + p[3] + \" \";\n    }\n    return mouse_path_string;\n}\nexport function paperPathToString(path) {\n    //format:\n    // x y handleInX handleInY handleOutX handleOutY\n    let movedPath = path.clone();\n    let boundingRect = movedPath.bounds;\n    movedPath.position = movedPath.position.subtract(boundingRect.topLeft);\n    var precision = 3;\n    let paper_path_string = \"\";\n    for (let s of movedPath.segments) {\n        paper_path_string += s.point.x.toFixed(precision) + \" \" + s.point.y.toFixed(precision) + \" \" + s.handleIn.x.toFixed(precision) + \" \" + s.handleIn.y.toFixed(precision) + \" \" + s.handleOut.x.toFixed(precision) + \" \" + s.handleOut.y.toFixed(precision) + \" \";\n    }\n    movedPath.remove();\n    return [boundingRect.topLeft, boundingRect.size, paper_path_string.trim()];\n}\nexport function pathPosSizeCorrection(points) {\n    let posMin = [Number.MAX_VALUE, Number.MAX_VALUE];\n    let posMax = [-Number.MAX_VALUE, -Number.MAX_VALUE];\n    for (let p of points) {\n        posMin[0] = Math.min(posMin[0], p[1]);\n        posMin[1] = Math.min(posMin[1], p[2]);\n        posMax[0] = Math.max(posMax[0], p[1]);\n        posMax[1] = Math.max(posMax[1], p[2]);\n    }\n    let correctedPoints = points.map((p) => { return [p[0], p[1] - posMin[0], p[2] - posMin[1], p[3]] });\n    let width = posMax[0] - posMin[0];\n    let height = posMax[1] - posMin[1];\n    // path pos size\n    return [correctedPoints, posMin, [width, height]];\n}\nexport function paperPathPosSizeCorrection(path) {\n    let points = [];\n    for (let s of segments) {\n        points.push([0, s.point.x, s.point.y, path.strokeWidth]);\n    }\n\n}\n// export function pathChunkPosCorrection(chunk, points) {\n//     return points.map((p) => { return [p[0], p[1] - chunk[0], p[2] - chunk[1], p[3]] });\n// }\nexport function dist(p, q) {\n    return Math.sqrt((p.x - q.x) ** 2 + (p.y - q.y) ** 2);\n}\nexport function parsePoint(string) {\n    let arr = (string || \"0 0\").split(\" \");\n    return new paper.Point(parseFloat(arr[0]), parseFloat(arr[1]));\n}\n\nexport function setAlpha(color, opacity) {\n    // coerce values so ti is between 0 and 1.\n    const _opacity = Math.round(Math.min(Math.max(opacity || 1, 0), 1) * 255);\n    const _opStr = _opacity.toString(16).toUpperCase();\n    if (color.length == 7) {\n        return color + _opStr;\n    } else if (color.length == 9) {\n        color[7] = _opStr[0];\n        color[8] = _opStr[1];\n        return color;\n    }\n}","import { parsePath, parseBezierPath, parsePoint } from './helper';\nexport const paper = require('paper');\nexport default class PaperCanvas {\n    constructor() {\n        this.css_id = \"paper-canvas\";\n        this.displayPaths = [];\n        this.toolLayer = null\n        this.drawLayer = null;\n        this.canvas = null;\n    }\n    drawEvent(event, animated, updateDisplay = true) {\n        let drawC = appData.drawingCanvas;\n        function V1() {\n            let points = parsePath(event.content.path, event.content.objpos);\n            let pos = parsePoint(event.content.objpos);\n            let size = parsePoint(event.content.objsize);\n            let color = \"objcolor\" in event.content ? event.content.objcolor : \"#000\"\n            // let strokeWidth = parseFloat(event.content.strokeWidth);\n            if (animated) {\n                drawC.asyncAddPathV1([pos.x, pos.y], points, color);\n            } else {\n                drawC.drawBoundingBox([[pos.x, pos.y], size]);\n                drawC.addPathV1(points, color, [[pos.x, pos.y], size], event.event_id);\n                if (updateDisplay) { drawC.updateDisplay_DEPRECATED(true); }\n            }\n        }\n        function V2() {\n            let segments = parseBezierPath(event.content.path, event.content.objpos);\n            // let pos = parsePoint(event.content.objpos);\n            // let size = parsePoint(event.content.objsize);\n            let strokeWidth = parseFloat(event.content.strokeWidth);\n            let closed = (\"closed\" in event.content && event.content.closed)\n            let color = \"objcolor\" in event.content ? event.content.objcolor : \"#000\"\n            let fillColor = \"objFillColor\" in event.content ? event.content.objFillColor : \"#00000000\"\n\n            if (animated) {\n                drawC.updateDisplay_DEPRECATED(true);\n                drawC.asyncAddPathV2(segments, color, fillColor, strokeWidth, closed, event.event_id);\n            } else {\n                // drawC.drawBoundingBox([pos, size]);\n                drawC.addPathV2(segments, color, fillColor, strokeWidth, closed, event.event_id);\n                if (updateDisplay) { drawC.updateDisplay_DEPRECATED(true); }\n            }\n        }\n        function V3() {\n\n        }\n        if (event.content.objtype == \"p.path\") {\n            if (!(\"version\" in event.content)) {\n                V1(); return\n            }\n            switch (event.content.version) {\n                case 1: V1()\n                case 2: V2()\n                case 3: V3()\n            }\n        }\n    }\n\n    activateToolLayer() {\n        this.toolLayer.activate()\n    }\n    activateDrawLayer() {\n        this.drawLayer.activate();\n    }\n    init() {\n        // Get a reference to the canvas object\n        this.canvas = document.getElementById('paper-canvas');\n        // Create an empty project and a view for the canvas:\n        paper.setup(this.canvas);\n        paper.install(window)\n        this.drawLayer = paper.project.activeLayer;\n        this.toolLayer = new paper.Layer()\n    }\n    offset(offset_delta) {\n        paper.view.center = paper.view.center.subtract(offset_delta);\n    }\n    resetOffset() {\n        this.setOffset(new paper.Point(0, 0));\n    }\n    setOffset(offset) {\n        paper.view.center = offset;\n    }\n    getZoom() {\n        return paper.view.zoom;\n    }\n    zoom(factor, zoomOrigin) {\n        if (zoomOrigin === null) {\n            paper.view.scale(factor)\n        } else {\n            var zoomOriProj = paper.view.viewToProject(zoomOrigin);\n            paper.view.scale(factor, zoomOriProj);\n        }\n    }\n    setZoom(zoom, zoomOrigin = paper.view.center) {\n        var currentViewCenter = paper.view.center;\n        var zoomOriProj = paper.view.viewToProject(zoomOrigin);\n        paper.view.center = zoomOriProj;\n        var scale = paper.view.zoom;\n        paper.view.zoom = zoom;\n        paper.view.center = currentViewCenter;\n    }\n    resetZoom() {\n        this.setZoom(1);\n    }\n    asyncAddPathV1() {\n        console.log(\"WAIT WHAT???\")\n    }\n    asyncAddPathV2(segments, color, fillColor, strokeWidth, closed = false, id = \"\") {\n        // TODO make async animation using dash\n        let p = this.addPathV2(segments, color, fillColor, strokeWidth, closed, id);\n        let length = 0;\n        length = p.length;\n        p.dashArray = [length, length];\n        // TODO dont hardcode the speed. instead get it from the event\n        // \"drawSpeed\": \"20 50 50 20 12\"\n        // 20ms for the first 50 px length, 50 ms for the second px length...\n        p.tween({ dashOffset: length }, { dashOffset: 0 }, 2 * length).then(() => {\n            p.dashArray = []\n        })\n        // p.tween({ dashArray: [10, 10] }, { dashArray: [1000, 10] }, 3000);\n    }\n\n    addPathV2(segments, color, fillColor, strokeWidth, closed = false, id = \"\") {\n        var p = new paper.Path(segments);\n        p.strokeColor = color;\n        // if (fillColor != \"#00000000\") { p.fillColor = fillColor; }\n        p.fillColor = fillColor;\n\n        p.strokeWidth = strokeWidth;\n        p.strokeCap = \"round\";\n        p.closed = closed;\n        if (id != \"\") {\n            p.data.id = id\n        }\n        return p;\n        // p.moveTo(new paper.Point(points[0][1], points[0][2]));\n        // for (let i = 1; i < points.length; i++) {\n        //     p.lineTo(new paper.Point(points[i][1], points[i][2]));\n        // }\n    }\n    addPathV1(points, color, [pos, size], id = \"\") {\n        var p = new paper.Path();\n        p.strokeColor = color;\n        p.strokeWidth = 2;\n        p.strokeCap = \"round\";\n        if (id != \"\") {\n            p.data.id = id\n        }\n        p.moveTo(new paper.Point(points[0][1], points[0][2]));\n        for (let i = 1; i < points.length; i++) {\n            p.lineTo(new paper.Point(points[i][1], points[i][2]));\n        }\n    }\n    updateDisplay_DEPRECATED() {\n        if (this.dispPath !== null) {\n            // this.dispPath.remove();\n            this.displayPaths.push(this.dispPath);\n            this.dispPath = null;\n        }\n        // for(p of this.displayPaths){\n        //     p.remove();\n        // }\n    }\n    // TODO call this function in a moment where ne drawing animaiotn is running\n    clearDisplayPaths() {\n        this.displayPaths.forEach((p) => { p.remove() });\n    }\n    clear() {\n        var length = 0;// = paper.project.activeLayer.removeChildren();\n        for (let l of paper.project.layers) {\n            if (l === this.toolLayer) {\n                continue\n            }\n            length += l.removeChildren().length;\n        }\n        console.log(\"removed \", length, \" items\")\n    }\n    drawBoundingBox(box) {\n        // console.log(\"drawBoundingBox not implemented for paper-canvas\")\n    }\n    reload(animated = false) {\n        this.clear();\n        var starttime = Date.now();\n        console.log(\"!! Paper Canvas redraw START\");\n        appData.objectStore.allSorted().forEach(obj => {\n            if (obj.type == \"p.whiteboard.object\") {\n                this.drawEvent(obj, animated, animated);\n            }\n        });\n        console.log(\"!! Paper Canvas redraw DONE in\", Date.now() - starttime);\n    }\n    getTransformedPointer(x, y) {\n        return paper.view.viewToProject(new paper.Point(x, y))\n    }\n}","import { login, updateAddRoomList } from './main'\n// import { matrixClient } from './main'//backend;\nimport { parsePoint } from './helper'\n\n\nwindow.actions = {\n    // loginClicked: loginClicked,\n    redactLastAction: redactLastAction,\n    formSubmit: formSubmit,\n    replaceLastEvent: replaceLastEvent,\n    moveLastEvent: moveLastEvent,\n    showAddRoomMenu: showAddRoomMenu,\n    hideAddRoomMenu: hideAddRoomMenu,\n    showSettingsMenu: showSettingsMenu,\n    hideSettingsMenu: hideSettingsMenu,\n    toggleLeftBar: toggleLeftBar\n}\nfunction sendmsgs(amount, client, room) {\n    for (let i = 0; i < amount; i++) {\n        const content = {\n            \"body\": i + \" Test Message\",\n            \"msgtype\": \"m.text\"\n        };\n        client.sendEvent(room, \"m.room.message\", content, \"\", (err, res) => {\n            console.log(err);\n        });\n    }\n}\nfunction toggleGrid() {\n    console.log(setting_grid);\n    if (setting_grid === \"\") {\n        setting_grid = \"squares\";\n    }\n    else if (setting_grid === \"squares\") {\n        setting_grid = \"dots\";\n    }\n    else if (setting_grid === \"dots\") {\n        setting_grid = \"\";\n    }\n    appData.drawingCanvas.reload();\n    // appData.drawingCanvas.updateDisplay_DEPRECATED();\n}\nfunction toggleTool() {\n    if (tool.type === toolType.draw) {\n        tool.type = toolType.erase;\n    }\n    else if (tool.type === toolType.erase) {\n        tool.type = toolType.draw;\n    }\n    // else if (tool === \"mouse\"){\n    //     tool = \"draw\";\n    // }\n    document.getElementById(\"tool\").innerText = \"Tool: \" + tool.getString();\n}\nfunction redactLastAction() {\n    let id = \"\";\n    let roomId = appData.matrixClient.currentRoomId;\n    let userId = appData.matrixClient.client.getUserId();\n    let sortedEvents = objectStore.allSorted();\n    for (let i = sortedEvents.length - 1; (id === \"\" && i >= 0); i--) {\n        let event = sortedEvents[i];\n        console.log(\"looping through events to find the one to redact\");\n        if (event.type == \"p.whiteboard.object\" && event.sender == userId) {\n            id = event.event_id;\n            break;\n        }\n    }\n    client.redactEvent(roomId, id).then(t => {\n        console.log(\"redacted: \", t);\n    });\n}\nfunction sendRandomText(client, room) {\n    textList = [\"hallo du\", \"noch nen test string\", \"affe\", \"haus is gross\", \"wie gehts\"];\n    text = textList[Math.floor(Math.random() * textList.length)];\n    const content = {\n        \"body\": text,\n        \"msgtype\": \"m.text\"\n    };\n    client.sendEvent(room, \"m.room.message\", content, \"\", (err, res) => {\n        console.log(err);\n    });\n}\nfunction sendCustomEvent(client, room) {\n    console.log(\"try to send custom event: ...\")\n    const content = {\n        \"version\": 2,\n        \"svg\": \"none\",\n        \"objtype\": \"p.path\",\n        \"objpos\": \"100 100\",\n        \"objcolor\": \"#000\",\n        \"closed\": true,\n        \"objFillColor\": '#ff000030',\n        \"strokeWidth\": 3,\n        \"path\": \"0 0 0 0 0 0 0 100 0 20 0 0 100 100 0 0 0 0 0 100 0 0 0 0 \",\n    };\n    client.sendEvent(room, \"p.whiteboard.object\", content, \"\", (err, res) => {\n        console.log(err);\n    });\n}\nexport function sendPath(client, room, string_path, color, fillColor, offset, size, strokeWidth, closed, version) {\n    console.log(\"send random path: ...\")\n    const content = {\n        \"version\": version,\n        \"svg\": \"none\",\n        \"objtype\": \"p.path\",\n        \"objpos\": offset[0] + \" \" + offset[1],\n        \"objsize\": size[0] + \" \" + size[1],\n        \"objcolor\": color == \"\" ? \"#\" + [\"F55\", \"5F5\", \"55F\"][Math.floor(Math.random() * 3)] : color,\n        \"objFillColor\": fillColor == \"\" ? \"#\" + [\"F55\", \"5F5\", \"55F\"][Math.floor(Math.random() * 3)] : fillColor,\n        \"path\": string_path,\n        \"strokeWidth\": strokeWidth,\n        \"closed\": closed,\n    };\n    client.sendEvent(room, \"p.whiteboard.object\", content, \"\", (err, res) => {\n        console.log(err);\n    });\n}\nfunction sendRandomPath(client, room) {\n    console.log(\"send random path: ...\")\n\n    const content = {\n        \"svg\": \"none\",\n        \"objtype\": \"p.path\",\n        \"objpos\": Math.floor(Math.random() * 80) + \" \" + Math.floor(Math.random() * 80),\n        \"objcolor\": \"#\" + [\"F55\", \"5F5\", \"55F\"][Math.floor(Math.random() * 3)],\n        \"path\": randomPath(),\n    };\n    client.sendEvent(room, \"p.whiteboard.object\", content, \"\", (err, res) => {\n        console.log(err);\n    });\n}\nfunction sendRandomWalk(client, room) {\n    console.log(\"send random path: ...\")\n\n    const content = {\n        \"svg\": \"none\",\n        \"objtype\": \"p.path\",\n        \"objpos\": Math.floor(100 + Math.random() * 80) + \" \" + Math.floor(100 + Math.random() * 80),\n        \"objcolor\": \"#\" + [\"F55\", \"5F5\", \"55F\"][Math.floor(Math.random() * 3)],\n        \"path\": randomStroke(),\n    };\n    client.sendEvent(room, \"p.whiteboard.object\", content, \"\", (err, res) => {\n        console.log(err);\n    });\n}\nfunction randomPath() {\n    var path = \"\"\n    for (let i = 0; i < Math.floor(Math.random() * 50); i++) {\n        path += i * 0.1 + \" \" + Math.floor(Math.random() * 40) + \" \" + Math.floor(Math.random() * 40) + \" \" + Math.floor(Math.random() * 6) + \" \"\n    }\n    return path;\n}\nfunction randomWalk() {\n    var walk = \"\";\n    var width = 0.1;\n    var len = Math.floor(Math.random() * 50);\n    var pos = [0, 0];\n    for (let i = 0; i < len; i++) {\n        var widthdiff = Math.random() * 0.2;\n        width += Math.min(i < len / 2 ? widthdiff : -widthdiff, 3)\n        pos = [pos[0] + Math.random() * 5 - 2.5, pos[1] + Math.random() * 5 - 2.5]\n        walk += i * 0.1 + \" \" + pos[0] + \" \" + pos[1] + \" \" + width + \" \";\n    }\n    return walk;\n}\nfunction randomStroke() {\n    var walk = \"\";\n    var width = 0.1;\n    var len = Math.floor(Math.random() * 200) + 80;\n    var pos = [0, 0];\n    var angle = 0;\n    var v_a = 0.2\n    for (let i = 0; i < len; i++) {\n        angle += v_a + 3 * Math.random() * v_a;\n        if (Math.random() < 0.07) {\n            v_a = -v_a;\n        }\n        var widthdiff = 0.1;\n        width += (i > (len - 20) || i < 20) ? -widthdiff * Math.sign(i - len / 2) : 0;\n        // width = Math.sign(width) * Math.min(Math.abs(width),8);\n        stepdist = 4 + Math.random() * 5;\n        console.log(width)\n        pos = [pos[0] + stepdist * Math.sin(angle), pos[1] + stepdist * Math.cos(angle)];\n        walk += i * 0.1 + \" \" + pos[0] + \" \" + pos[1] + \" \" + width + \" \";\n    }\n    return walk;\n}\n\nfunction formSubmit(e) {\n    e.preventDefault();\n    console.log('onsub');\n    return false;\n}\n\n// function replaceLastEvent(matrixClient, currentRoomId) {\n//     let id = \"\";\n//     // let room = client.getRoom(roomId);\n//     let userId = matrixClient.getUserId();\n//     let sortedEvents = objectStore.allSorted();\n//     for (i = sortedEvents.length - 1; (id === \"\" && i >= 0); i--) {\n//         let event = sortedEvents[i];\n//         console.log(\"looping through events to find the one to redact\");\n//         if (event.type == \"p.whiteboard.object\" && event.sender == userId) {\n//             id = event.event_id;\n//             break;\n//         }\n//     }\n//     let replaceId = id;\n//     const content = {\n//         \"version\": 2,\n//         \"svg\": \"none\",\n//         \"objtype\": \"p.path\",\n//         \"objpos\": \"100 100\",\n//         \"objcolor\": \"#000\",\n//         \"closed\": true,\n//         \"objFillColor\": '#ff000030',\n//         \"strokeWidth\": 3,\n//         \"path\": \"0 0 0 0 0 0 0 100 0 0 0 0 100 100 0 0 0 0 100 0 0 0 0 0\",\n//     };\n//     // const replaceContent = {\n//     //     \"body\": \"\",\n//     //     \"m.new_content\": content,\n//     //     \"m.relates_to\": {\n//     //         \"rel_type\": \"m.replace\",\n//     //         \"event_id\": replaceId\n//     //     }\n//     // }\n//     matrixClient.sendEvent(currentRoomId, \"p.whiteboard.object\", content, \"\", (err, res) => {\n//         console.log(err);\n//     });\n//     matrixClient.redactEvent(currentRoomId, replaceId).then(t => {\n//         console.log(\"redacted for replace \", t);\n//     });\n// }\nfunction lastEvent() {\n    let lastEvent = null;\n    // let room = client.getRoom(roomId);\n    let userId = appData.matrixClient.client.getUserId();\n    let sortedEvents = appData.objectStore.allSorted();\n    for (let i = sortedEvents.length - 1; i >= 0; i--) {\n        let event = sortedEvents[i];\n        console.log(\"looping through events to find the one to redact\");\n        if (event.type == \"p.whiteboard.object\" && event.sender == userId) {\n            lastEvent = event;\n            break;\n        }\n    }\n    return lastEvent;\n}\nfunction replaceEvent(idToReplace, newContent) {\n    appData.matrixClient.client.sendEvent(appData.matrixClient.currentRoomId, \"p.whiteboard.object\", newContent, \"\", (err, res) => {\n        console.log(err);\n    });\n    appData.matrixClient.client.redactEvent(appData.matrixClient.currentRoomId, idToReplace).then(t => {\n        console.log(\"redacted for replace \", t);\n    });\n}\nfunction replaceLastEvent() {\n    let replaceId = lastEvent().event_id;\n    const content = {\n        \"version\": 2,\n        \"svg\": \"none\",\n        \"objtype\": \"p.path\",\n        \"objpos\": \"100 100\",\n        \"objcolor\": \"#000\",\n        \"closed\": true,\n        \"objFillColor\": '#ff000030',\n        \"strokeWidth\": 3,\n        \"path\": \"0 0 0 0 0 0 0 100 0 0 0 0 100 100 0 0 0 0 100 0 0 0 0 0\",\n    };\n    replaceEvent(replaceId, content);\n}\nfunction moveLastEvent() {\n    let ev = lastEvent();\n    let newPoint = parsePoint(ev.content.objpos).add(new paper.Point(100, 0));\n    ev.content.objpos = newPoint.x + \" \" + newPoint.y;\n    replaceEvent(ev.event_id, ev.content)\n}\nfunction toggleLeftBar() {\n    let body = document.getElementById('leftbar-expand');\n    let footer = document.getElementById('leftbar-footer')\n    if (body.getBoundingClientRect().height == 0) {\n        body.style.height = '20em';\n        footer.innerHTML = '˄'\n    } else {\n        body.style.height = '0';\n        footer.innerHTML = '˅'\n    }\n}\nfunction showAddRoomMenu() {\n    updateAddRoomList()\n    let addRoomMenu = document.getElementById(\"add-room-container\")\n    addRoomMenu.style.display = 'block'\n\n}\nfunction hideAddRoomMenu() {\n    let addRoomMenu = document.getElementById(\"add-room-container\")\n    addRoomMenu.style.display = 'none'\n}\n\nfunction showSettingsMenu() {\n    let settingsMenu = document.getElementById(\"settings-container\")\n    let roomId = document.getElementById('room-menu-room-id')\n    let room = appData.matrixClient.client.getRoom(appData.matrixClient.currentRoomId);\n\n    roomId.innerHTML = room.roomId\n    settingsMenu.style.display = 'block'\n}\nfunction hideSettingsMenu() {\n    let settingsMenu = document.getElementById(\"settings-container\")\n    settingsMenu.style.display = 'none'\n}","var _tool_stroke_width_index = 1\nvar TOOL_STROKE_WIDTH_OPTION_COUNT = 4\nexport default function init_line_style_selector(){\n    let button = document.getElementById(\"line-type-selector-button\")\n    button.onclick = function (btnEv) {\n        _tool_stroke_width_index += 1;\n        _tool_stroke_width_index = _tool_stroke_width_index % TOOL_STROKE_WIDTH_OPTION_COUNT\n        updateVisiblePreviewItem()\n    }\n    function updateVisiblePreviewItem() {\n        let previewItems = document.querySelectorAll(\"#line-type-selector-button div\");\n        for (let i = 0; i < TOOL_STROKE_WIDTH_OPTION_COUNT; i++) {\n            if (i == _tool_stroke_width_index) {\n                previewItems[i].style.display = \"block\"\n            } else {\n                previewItems[i].style.display = \"none\"\n            }\n        }\n    }\n    updateVisiblePreviewItem(1);\n}\nexport function GetToolStrokeWidthIndex() {\n    return _tool_stroke_width_index;\n}","// TODO: think about this appraoch... maybe store the color picker instance in main...\n// const paper = require('paper')\nimport {paper} from './paper-canvas'\n\nlet colorPickerSvg;\nexport function init_color_picker() {\n    colorPickerSvg = new ColorPicker();\n    colorPickerSvg.selectColor([1, 0])\n}\nexport function GetPickerColor(){\n    return colorPickerSvg.getColor().toCSS(true)\n}\nexport function SetColorPalette(palette){\n    colorPickerSvg.setColorPalette(palette)\n}\nexport class ColorPicker {\n\n    constructor() {\n        // this.colors = [\"#999\", \"#FEB326\", \"#7F58AF\"]//,\"#8ae234\"\n        // this.colors = [\"#999\", \"#64C5EB\", \"#8ae234\", \"#E84D8A\", \"#FEB326\", \"#7F58AF\"]//,\n        this.colors = [\"#999\",  \"#8ae234\", \"#ef2929\", \"#fcaf3e\", \"#729fcf\",\"#ad7fa8\"]//,\n        this.darkColors = this.colors.map((c) => { return new paper.Color(c).multiply(0.7) });\n        this.darkColors[0] = 'black'\n        this.outline = null;\n        this.colorPaths = [[], []]\n        this.selectedColor = [0, 0];\n        this.COLOR_PICKER_BORDER = 20;\n        this.innerCircle = 0.35\n        this.middleCircle = 0.7\n\n        this.project = new paper.Project(\"color-picker-canvas\");\n        this.redraw();\n    }\n    redraw(){\n        this.project.activate();\n        let el = document.getElementById('color-picker-canvas');\n        let size = paper.view.size;\n        let cent = new paper.Point(size.divide(2));\n        let radi = size.width / 2 - this.COLOR_PICKER_BORDER;\n        let circleBg = new paper.Path.Circle(cent, radi);\n        circleBg.shadowBlur = this.COLOR_PICKER_BORDER;\n        circleBg.shadowColor = 'grey';\n        circleBg.fillColor = 'white';\n        this.colorPaths[0] = this.create_segment_ring(this.colors, cent, radi * this.middleCircle - 1, radi, 0);\n        this.colorPaths[1] = this.create_segment_ring(this.darkColors, cent, radi * this.innerCircle, radi * this.middleCircle, 1);\n\n        let circleInner = new paper.Path.Circle(cent, this.innerCircle * radi);\n        circleInner.shadowBlur = this.COLOR_PICKER_BORDER;\n        circleInner.shadowColor = '#444';\n        circleInner.fillColor = 'white';\n\n        paper.projects[0].activate();\n    }\n    setColorPalette(palette){\n        this.colors = [\"#999\"].concat(palette);\n        this.darkColors = this.colors.map((c) => { return new paper.Color(c).multiply(0.7) });\n        this.darkColors[0] = 'black'\n        this.redraw()\n    }\n    create_segment_ring(colors, center, innerRad, outerRad, index) {\n        let count = colors.length;\n        let offset = Math.PI / count;\n        let paths = [];\n        for (let i = 0; i < count; i++) {\n            let deg = Math.PI * 2 / count * i - offset;\n            let deg2 = Math.PI * 2 / count * (i + 1) - offset\n            let p = this.create_segment(center, innerRad, outerRad, deg, deg2);\n            p.fillColor = colors[i]\n            p.onMouseDown = function (e) {\n                colorPickerSvg.selectColor([index, i])\n            }\n            paths.push(p);\n        }\n        return paths;\n    }\n    create_segment(center, innerRad, outerRad, startDeg, endDeg) {\n        function getPointFromDeg(deg, center, rad) {\n            let x = Math.sin(deg) * rad;\n            let y = -Math.cos(deg) * rad;\n            return center.add(new paper.Point(x, y));\n        }\n\n        let p = new paper.Path();\n        let middleDeg = (startDeg + endDeg) / 2;\n        p.moveTo(getPointFromDeg(startDeg, center, outerRad));\n        p.arcTo(getPointFromDeg(middleDeg, center, outerRad), getPointFromDeg(endDeg, center, outerRad));\n        p.lineTo(getPointFromDeg(endDeg, center, innerRad));\n        p.arcTo(getPointFromDeg(middleDeg, center, innerRad), getPointFromDeg(startDeg, center, innerRad));\n        p.closePath();\n        return p;\n    }\n\n    selectColor(index_arr) {\n        this.selectedColor = index_arr\n        let path = this.colorPaths[index_arr[0]][index_arr[1]];\n        if (this.outline !== null) {\n            this.outline.remove();\n            // let seg = path.segments.slice();\n            // this.outline.tween({segments:seg},1000)\n        }\n        this.outline = path.clone();\n        this.outline.fillColor = \"#FFFFFF00\"\n        this.outline.strokeWidth = 4;\n        this.outline.bringToFront();\n        this.outline.strokeColor = 'white';\n    }\n    getColor() {\n        let path = this.colorPaths[this.selectedColor[0]][this.selectedColor[1]];\n        return path.fillColor;\n    }\n}","// import { drawingCanvas } from \"../drawing\";\nimport PaperCanvas from \"../paper-canvas\";\nimport { sendPath } from \"../actions\";\n// import { objectStore, currentRoomId,drawingCanvas } from \"../main\";\n// import { matrixClient } from '../main'//backend;\nimport { GetToolStrokeWidthIndex } from \"./line-style-selector\";\nimport { GetPickerColor } from \"../color-picker\";\nimport { mousePathToString, paperPathToString, pathPosSizeCorrection, setAlpha } from \"../helper\";\nexport default class ToolPen {\n    constructor(marker = false) {\n        this.isMarker = marker\n\n        // Tool state\n        this.mouse_path = [];\n        this.mouse_path_last_time = Date.now();\n        this.last_pos = []\n        this.tool_canceled = false;\n\n        // Tool settings\n        this.strokeWidthOptions = [1, 2, 4, 8];\n\n        this.previewItem = null;\n\n        this.previewPaths = [];\n        this.previewPathTween = null;\n    }\n    getStrokeWidth() {\n        return this.strokeWidthOptions[GetToolStrokeWidthIndex()] * (this.isMarker ? 10 : 1);\n    }\n    getStrokeColor() {\n        return this.isMarker ? setAlpha(GetPickerColor(), 0.1) : GetPickerColor();\n    }\n    tooldown(proX, proY, pressure) {\n        this.tool_canceled = false;\n\n        this.mouse_path_start_time = Date.now();\n        this.last_pos = [0, proX, proY, pressure];\n        this.mouse_path = [[0, proX, proY, pressure * 4]];\n\n        appData.drawingCanvas.activateToolLayer()\n        for (let path of this.previewPaths) {\n            if (!path.visible) {\n                path.remove()\n            }\n        }\n        this.previewPaths.filter((path) => { path.visible })\n\n        let prev = new Path();\n        this.previewPaths.push(prev);\n\n        let colorAlpha = new Color(this.getStrokeColor());\n        colorAlpha.alpha = colorAlpha.alpha * 0.6;\n        // let colorAlpha = setAlpha(this.getStrokeColor(), 0.3);\n        prev.strokeColor = colorAlpha;\n        prev.strokeWidth = this.getStrokeWidth();\n        prev.strokeCap = \"round\"\n        prev.moveTo(new Point(proX, proY))\n        appData.drawingCanvas.activateDrawLayer()\n\n        console.log(\"tooldown\");\n    }\n    toolmove(proX, proY, pressure) {\n        console.log(\"toolmove\");\n        // no pressure for now\n        pressure = 1;\n        let x = proX;\n        let y = proY;\n        let time_delta = Math.min(80, Date.now() - this.mouse_path_last_time);\n        let thickness_factor = 1\n        this.mouse_path_last_time = Date.now();\n\n        let currentPos = [time_delta, x, y, (pressure * 2 + Math.min(3, Math.max(0.0, thickness_factor)))];\n        let dist = (currentPos[1] - this.last_pos[1]) ** 2 + (currentPos[2] - this.last_pos[2]) ** 2\n\n        // let velocity = dist / Math.max(1, time_delta);\n        // let thickness_factor = 1.5 - velocity / 8.0;\n        // todo fix pressure\n        let currentPosPoint = new Point(currentPos[1], currentPos[2])\n        this.mouse_path.push(currentPos);\n        this.previewPaths[this.previewPaths.length - 1].lineTo(currentPosPoint);\n        this.previewPaths[this.previewPaths.length - 1].smooth()\n        // appData.drawingCanvas.drawSegmentDisplay([this.last_pos, currentPos], this.getStrokeColor(), this.getStrokeWidth());\n        this.last_pos = currentPos;\n\n    }\n    toolpreviewmove(pos) {\n        if (this.previewItem === null) {\n            appData.drawingCanvas.activateToolLayer()\n            this.previewItem = new Path.Circle(new Point(0, 0), 0.5);\n            this.previewItem.applyMatrix = false\n            appData.drawingCanvas.activateDrawLayer()\n        }\n        this.previewItem.scaling = new Point(this.getStrokeWidth(), this.getStrokeWidth())\n        this.previewItem.fillColor = this.getStrokeColor();\n        this.previewItem.position = pos;\n    }\n    toolup(proX, proY) {\n        if (this.tool_canceled) { return; }\n        if (appData.objectStore.hasRoom(appData.matrixClient.currentRoomId)) {\n            let [corrected_mouse_path, pos, size] = pathPosSizeCorrection(this.mouse_path);\n            let string_path;\n            let version;\n            // if (appData.drawingCanvas instanceof UnlimitedCanvas) {\n            //     string_path = mousePathToString(corrected_mouse_path);\n            //     version = 1;\n            // }\n            // else \n            if (appData.drawingCanvas instanceof PaperCanvas) {\n                let paper_mouse_path = new Path(corrected_mouse_path.map((s) => { return [s[1], s[2]] }));\n                paper_mouse_path.simplify(1 / appData.drawingCanvas.getZoom());\n                string_path = paperPathToString(paper_mouse_path)[2];\n                paper_mouse_path.remove();\n                version = 2;\n            }\n            sendPath(appData.matrixClient.client, appData.matrixClient.currentRoomId,\n                string_path,\n                this.getStrokeColor(), '#00000000', pos, size, this.getStrokeWidth(), false, version);\n\n        } else {\n            console.log(\"NO ROOM SELECTED TO DRAW IN!\")\n            appData.drawingCanvas.updateDisplay_DEPRECATED();\n        }\n        this.toolcancel();\n    }\n    toolcancel() {\n        console.log(\"CANCEL\");\n        this.mouse_path = [];\n        this.mouse_path_last_time = Date.now();\n        this.last_pos = []\n        this.tool_canceled = true;\n\n        let prev = this.previewPaths[this.previewPaths.length - 1]\n        let l = prev.length;\n        prev.dashArray = [l, l]\n        prev.tween({ dashOffset: 0 }, { dashOffset: -l }, 2 * l).then((e) => {\n            prev.visible = false\n        });\n    }\n    activate() {\n        if (this.previewItem) {\n            this.previewItem.visible = true;\n        }\n    }\n    deactivate() {\n        if (this.previewItem) {\n            this.previewItem.visible = false;\n        }\n    }\n}","import ToolPen from './tools/tool-pen.js'\nimport ToolEraser from './tools/tool-eraser.js'\nimport ToolLine from './tools/tool-line.js'\nimport ToolRect from './tools/tool-rect.js'\n// import { drawingCanvas } from './main.js'\nimport { dist } from './helper.js'\n\nexport var tools = {\n    \"tool-type-pen\": new ToolPen(),\n    \"tool-type-eraser\": new ToolEraser(),\n    \"tool-type-marker\": new ToolPen(true),\n    \"tool-type-line\": new ToolLine(),\n    \"tool-type-square\": new ToolRect(),\n    \"tool-type-ellipse\": null,\n    \"tool-type-text\": null,\n    \"tool-type-line-width\": null\n}\nexport var activeTool = tools[\"tool-type-pen\"];\nfunction over_handler(event) { }\nfunction enter_handler(event) { }\n\nvar touchesCache = [];\nvar touchesCacheBegin = [];\nvar touchZoomCache = 0;\nvar touchPanCache = new DOMPoint(0, 0);\nexport function setActiveTool(id){\n    activeTool = tools[id];\n}\nexport default function init_input(element) {\n    var el = element;\n    // POINTER\n    el.onpointerdown = function (e) {\n        // e.preventDefault();\n        console.log(\"onpointerdown\");\n        let project_pt = appData.drawingCanvas.getTransformedPointer(e.offsetX, e.offsetY);\n        if (e.pointerType == \"touch\") {\n            if (touchesCache.length == 0) {\n                activeTool.tooldown(project_pt.x, project_pt.y, e.pressure);\n            } else {\n                activeTool.toolcancel();\n                touchZoomCache = appData.drawingCanvas.getZoom();\n            }\n            touchesCacheBegin.push(e);\n            touchesCache.push(e);\n        } else {\n            // let project_pt = appData.drawingCanvas.getTransformedPointer(e.offsetX, e.offsetY);\n            activeTool.tooldown(project_pt.x, project_pt.y, e.pressure);\n        }\n    };\n    el.onpointermove = function (e) {\n        // e.preventDefault()\n        // console.log(\"onpointermove\");\n        if ((e.buttons == 1 && (e.pointerType == \"mouse\" || e.pointerType == \"pen\"))\n            || (e.pointerType == 'touch' && touchesCache.length < 2)) {\n            let project_pt = appData.drawingCanvas.getTransformedPointer(e.offsetX, e.offsetY);\n            activeTool.toolmove(project_pt.x, project_pt.y, e.pressure);\n        } else if (e.buttons == 4 && (e.pointerType == \"mouse\" || e.pointerType == \"pen\")) {\n            let offset = new paper.Point(e.movementX, e.movementY)\n            appData.drawingCanvas.offset(offset.divide(appData.drawingCanvas.getZoom()));\n        }\n        else if (touchesCache.length == 2 && e.pointerType == \"touch\") {\n            let index = touchesCache.findIndex((el) => { return e.pointerId === el.pointerId });\n            touchesCache[index] = e;\n            handlePanZoom();\n        }\n        activeTool.toolpreviewmove(appData.drawingCanvas.getTransformedPointer(e.offsetX, e.offsetY))\n    };\n    el.onpointerup = function (e) {\n        console.log(\"onpointerup\");\n        let project_pt = appData.drawingCanvas.getTransformedPointer(e.offsetX, e.offsetY);\n        if (e.pointerType == \"touch\") {\n            touchesCache = touchesCache.filter((cache_event) => { cache_event.pointerId == e.pointerId });\n            touchesCacheBegin = touchesCacheBegin.filter((cache_event) => { cache_event.pointerId == e.pointerId });\n            touchPanCache = new DOMPoint(0, 0);\n            handleTouchType = \"\";\n            touchZoomCache = 0;\n            if (!activeTool.tool_canceled) {\n                activeTool.toolup(project_pt.x, project_pt.y, e.pressure);\n            }\n        } else {\n            activeTool.toolup(project_pt.x, project_pt.y, e.pressure);\n        }\n    };\n\n    // WHEEL\n    el.onwheel = function (e) {\n        e.preventDefault();\n        if (e.ctrlKey) {\n            //ctrl is used as the indicator for pinch gestures... (Not a fan...)\n            zoom(e.offsetX, e.offsetY, 1 + e.wheelDeltaY);\n        } else {\n            let scroll_speed = 0.5;\n            let offset = new paper.Point(e.wheelDeltaX * scroll_speed, e.wheelDeltaY * scroll_speed);\n            appData.drawingCanvas.offset(offset.divide(appData.drawingCanvas.getZoom()));\n        }\n    };\n    // unused\n    el.onpointerover = over_handler;\n    el.onpointerenter = enter_handler;\n    // el.onpointercancel = cancel_handler;\n    // el.onpointerout = out_handler;\n    // el.onpointerleave = leave_handler;\n    // el.gotpointercapture = gotcapture_handler;\n    // el.lostpointercapture = lostcapture_handler;\n    // el.ontouchend = (e) => {\n    //     // e.preventDefault();\n    // };\n    el.addEventListener(\"touchstart\", (e) => {\n        e.preventDefault();\n    }, { passive: false });\n    el.addEventListener(\"gesturestart\", (e) => {\n        e.preventDefault();\n    }, { passive: false });\n    // el.ontouchstart = (e) => {\n    //     e.preventDefault();\n    // };\n    // el.ontouchmove = (e) => {\n    //     // e.preventDefault();\n    // };\n}\n\n\nfunction scroll(deltaX, deltaY) {\n    let scroll_speed = 0.5;\n    appData.drawingCanvas.offset(new paper.Point(deltaX * scroll_speed, deltaY * scroll_speed));\n}\nfunction zoom(offsetX, offsetY, factor) {\n    let zoom_speed = 0.004;\n    appData.drawingCanvas.zoom(1 + factor * zoom_speed, new paper.Point(offsetX, offsetY));\n}\nvar touchZoomCache = 0;\nvar touchPanCache = new DOMPoint(0, 0);\nvar handleTouchType = \"\"\nfunction handlePanZoom() {\n    let drawC=appData.drawingCanvas\n    let cx = drawC.canvas.getBoundingClientRect().x;\n    let cy = drawC.canvas.getBoundingClientRect().y;\n    let canvasZoom = drawC.getZoom();\n    let start1 = drawC.getTransformedPointer(touchesCacheBegin[0].clientX - cx, touchesCacheBegin[0].clientY - cy);\n    let start2 = drawC.getTransformedPointer(touchesCacheBegin[1].clientX - cx, touchesCacheBegin[1].clientY - cy);\n    let current1 = drawC.getTransformedPointer(touchesCache[0].clientX - cx, touchesCache[0].clientY - cy);\n    let current2 = drawC.getTransformedPointer(touchesCache[1].clientX - cx, touchesCache[1].clientY - cy);\n    var PINCH_THRESHOLD = 70 //drawC.canvas.clientWidth / 40;\n    var PAN_THRESHOLD = 40\n    var distStart = dist(start1, start2);\n    var distCurrent = dist(current1, current2);\n    var currentCenter = current1.add(current2).multiply(0.5); //new paper.Point((current1.x + current2.x) / 2, (current1.y + current2.y) / 2)\n    var startCenter = start1.add(start2).multiply(0.5); //[(start1.x + start2.x) / 2, (start1.y + start2.y) / 2]\n    var panDistDelta = dist(currentCenter, startCenter) * canvasZoom;\n    var pinchDistDelta = Math.abs(distStart - distCurrent) * canvasZoom;\n    // console.log(\"pinch Dist: \", panDistDelta)\n    // console.log(\"pan Dist: \", pinchDistDelta)\n    if (pinchDistDelta < PINCH_THRESHOLD && panDistDelta < PAN_THRESHOLD) {\n        return\n    }\n    if (handleTouchType == \"\") {\n        handleTouchType = pinchDistDelta > panDistDelta ? \"pinch\" : \"pan\"\n    }\n    if (handleTouchType == \"pinch\") {\n        // Zoom\n        var currentZoomFactor = distCurrent / distStart;\n        // console.log(\"zoomFactor: \", currentZoomFactor);\n        //TODO some log or exp to make absolute zoom... Maybe not. feels just fine as it is...\n        drawC.setZoom(touchZoomCache * currentZoomFactor, startCenter);\n        // touchZoomCache = distCurrent / distStart;\n    }\n    if (handleTouchType == \"pan\") {\n        // Pan\n        var offset = startCenter.subtract(currentCenter) //new DOMPoint(startCenter[0] - currentCenter[0], startCenter[1] - currentCenter[1]);\n        // console.log(\"offset: \", offset);\n        var offsetDiff = new paper.Point(touchPanCache.x - offset.x, touchPanCache.y - offset.y);\n        touchPanCache = offset;\n        // console.log(\"offsetDiff: \", offsetDiff, drawC.getZoom());\n        // multipy with zoom\n        drawC.offset(offsetDiff);\n    }\n}\n","// import {  } from \"../drawing\";\n// import { objectStore } from '../main'\n// import {  } from '../main'//backend;\nimport { GetToolStrokeWidthIndex } from \"./line-style-selector\";\nimport { mousePathToString, paperPathToString, pathPosSizeCorrection, setAlpha } from \"../helper\";\n\n\nexport default class ToolEraser {\n    constructor() {\n\n        // Tool state\n        this.removedElementsArray\n        this.tool_canceled = false\n        this.idsToDelete = []\n\n        // Tool settings\n        // this.strokeWidth = 10;\n        this.strokeWidthOptions = [5, 10, 20, 40];\n\n        // Preview\n        this.previewItem = null\n\n    }\n\n    getStrokeWidth() {\n        return this.strokeWidthOptions[GetToolStrokeWidthIndex()];\n    }\n    tooldown(proX, proY, pressure) {\n        this.tool_canceled = false;\n        this.addItemsFromPoint(new paper.Point(proX, proY))\n        console.log(\"tooldown\");\n    }\n    toolmove(proX, proY, pressure) {\n        console.log(\"toolmove\");\n        this.addItemsFromPoint(new paper.Point(proX, proY))\n    }\n    addItemsFromPoint(testPoint) {\n        var hitOptions = {\n            stroke: true,\n            tolerance: this.getStrokeWidth(),\n            match: function (hitRes) {\n                return !(\"markedForDeletion\" in hitRes.item.data)\n                    && (\"id\" in hitRes.item.data)\n            }\n        };\n\n        var hitResult = paper.project.hitTest(testPoint, hitOptions);\n        var i = 0;\n        while (hitResult && i < 10) {\n            if (!hitResult) { continue }\n            console.log('hitResult', hitResult);\n            if (appData.objectStore.getById(hitResult.item.data.id).sender == appData.matrixClient.client.getUserId()) {\n                hitResult.item.opacity = 0.5;\n                hitResult.item.data.markedForDeletion = true\n                this.idsToDelete.push(hitResult.item.data.id)\n                hitResult = paper.project.hitTest(testPoint, hitOptions);\n            }\n            i++;\n        }\n    }\n    toolup(proX, proY) {\n        if (this.tool_canceled) { return; }\n\n        // console.log(\"try to erase\");\n        // let pt = drawingCanvas.getTransformedPointer(proX, proY);\n        // let sortedEvents = objectStore.allSorted();\n        // var id = \"\"\n        // let eraser_size = 70;\n        // let userId = matrixClient.getUserId();\n        // for (let i = sortedEvents.length - 1; i >= 0; i--) {\n        //     let event = sortedEvents[i];\n        //     if (event.type == \"p.whiteboard.object\" && event.sender == userId) {\n        //         let points = parsePath(event.content.path, event.content.objpos);\n        //         for (let j in points) {\n        //             let p = points[j];\n        //             if ((pt.x - p[1]) ** 2 + (pt.y - p[2]) ** 2 < eraser_size) {\n        //                 id = event.event_id;\n        //                 break;\n        //             }\n        //         }\n        //     }\n        // }\n        this.toolcancel();\n\n        console.log(this.idsToDelete)\n        for (let id of this.idsToDelete) {\n            console.log(id)\n            appData.matrixClient.client.redactEvent(appData.matrixClient.currentRoomId, id).then(t => {\n                console.log(\"redacted (eraser): \", t);\n            });\n            this.idsToDelete = this.idsToDelete.filter((itemId) => { return itemId == id })\n            // await sleep(300);\n        }\n        this.idsToDelete = [];\n\n    }\n    toolcancel() {\n        console.log(\"CANCEL\");\n        this.tool_canceled = true;\n    }\n    toolpreviewmove(pos) {\n        if (this.previewItem === null) {\n            appData.drawingCanvas.activateToolLayer()\n            this.previewItem = new paper.Path.Circle(new paper.Point(0, 0), 1);\n            this.previewItem.fillColor = '#00000000'\n            this.previewItem.strokeWidth = 1\n            this.previewItem.strokeColor = '#999'\n            this.previewItem.dashArray = [3, 3]\n            this.previewItem.strokeCap = 'round'\n            // this.previewItem.applyMatrix = false\n            // this.previewItem.scaling = new paper.Point(this.getStrokeWidth(), this.getStrokeWidth())\n            appData.drawingCanvas.activateDrawLayer()\n        }\n        if (this.previewItem.bounds.size.width != 2 * this.getStrokeWidth()) {\n            let w = 2 * this.getStrokeWidth() / this.previewItem.bounds.size.width\n            this.previewItem.scaling = new paper.Point(w, w)\n        }\n        this.previewItem.position = pos;\n    }\n    activate() {\n        if (this.previewItem) {\n            this.previewItem.visible = true\n        }\n    }\n    deactivate() {\n        this.previewItem.visible = false\n    }\n}","// import { drawingCanvas } from \"../drawing\";\nimport { sendPath } from \"../actions\";\n// import { objectStore, currentRoomId,drawingCanvas } from '../main'\n// import { matrixClient } from '../main'//backend;\nimport { GetPickerColor } from \"../color-picker\";\n// import { Path, Color, Point } from \"paper/dist/paper-core\";\nimport { GetToolStrokeWidthIndex } from \"./line-style-selector\";\nimport { mousePathToString, paperPathToString, pathPosSizeCorrection, setAlpha } from \"../helper\";\n\n\nexport default class ToolLine {\n    constructor() {\n\n        // Tool state\n        this.canvas_line = null;\n        // this.mouse_path_last_time = Date.now();\n        // this.last_pos = []\n        this.tool_canceled = true;\n\n        // Tool settings\n        // this.strokeWidth = 2;\n        this.strokeWidthOptions = [1, 2, 4, 8];\n    }\n    getStrokeWidth(){\n        return this.strokeWidthOptions[GetToolStrokeWidthIndex()];\n    }\n    tooldown(proX, proY, pressure) {\n        this.tool_canceled = false;\n        let pt = new paper.Point(proX, proY);\n        this.canvas_line = new paper.Path([pt,pt])\n        let colorAlpha = setAlpha(GetPickerColor(), 0.3);\n        this.canvas_line.strokeColor = colorAlpha;\n        this.canvas_line.strokeWidth = this.getStrokeWidth();\n        this.canvas_line.strokeCap = \"round\"\n        // this.mouse_path_start_time = Date.now();\n        // this.last_pos = [0, pt.x, pt.y, pressure];\n        // this.mouse_path = [[0, pt.x, pt.y, pressure * 4]];\n        console.log(\"tooldown\");\n    }\n    toolmove(proX, proY, pressure) {\n        console.log(\"toolmove\");\n        this.canvas_line.lastSegment.point = new paper.Point(proX, proY);\n    }\n\n    toolup(proX, proY) {\n        if (this.tool_canceled) { return; }\n        if (appData.objectStore.hasRoom(appData.matrixClient.currentRoomId)) {\n            // let [corrected_mouse_path, pos, size] = pathPosSizeCorrection([[0,this.canvas_line.firstSegment.point.x,this.canvas_line.firstSegment.point.y,0],[0,this.canvas_line.lastSegment.point.x,this.canvas_line.lastSegment.point.y,0]]);\n\n            // let paper_mouse_path = new paper.Path(corrected_mouse_path.map((s) => { return [s[1], s[2]] }));\n            \n            let [pos, size, string_path] = paperPathToString(this.canvas_line);\n            // paper_mouse_path.remove();\n            let version = 2;\n            sendPath(appData.matrixClient.client, appData.matrixClient.currentRoomId,\n                string_path,\n                GetPickerColor(),'#00000000', [pos.x,pos.y], [size.width,size.height], this.getStrokeWidth(), false, version);\n        } else {\n            console.log(\"NO ROOM SELECTED TO DRAW IN!\")\n            appData.drawingCanvas.updateDisplay_DEPRECATED();\n        }\n        this.toolcancel();\n    }\n    toolcancel() {\n        console.log(\"CANCEL\");\n        if(this.canvas_line !== null){\n            this.canvas_line.remove();\n        }\n        this.canvas_line = null;\n        this.tool_canceled = true;\n    }\n    toolpreviewmove(pos){}\n    activate(){}\n    deactivate(){}\n}","// import { drawingCanvas } from \"../drawing\";\n// import { Path, Color, Point } from \"paper/dist/paper-core\";\nimport { GetPickerColor } from \"../color-picker\";\nimport { GetToolStrokeWidthIndex } from \"./line-style-selector\";\nimport { sendPath } from \"../actions\";\n// import { objectStore, currentRoomId, drawingCanvas} from \"../main\";\n// import { matrixClient } from '../main'//backend;\nimport { mousePathToString, paperPathToString, pathPosSizeCorrection, setAlpha } from \"../helper\";\n\nexport default class ToolRect {\n    constructor() {\n\n        // Tool state\n        this.canvas_rect = null;\n\n        // Tool settings\n        this.strokeWidthOptions = [1, 2, 4,8];\n    }\n    getStrokeWidth(){\n        return this.strokeWidthOptions[GetToolStrokeWidthIndex()];\n    }\n\n    tooldown(proX, proY, pressure) {\n        this.tool_canceled = false;\n        let pt = new paper.Point(proX, proY);\n        appData.drawingCanvas.activateToolLayer();\n        this.canvas_rect = new paper.Path.Rectangle(pt, pt)\n        let colorAlpha = setAlpha(GetPickerColor(), 0.3);\n        this.canvas_rect.strokeColor = colorAlpha;\n        this.canvas_rect.strokeWidth = this.getStrokeWidth();\n        this.canvas_rect.strokeCap = \"round\"\n        // this.mouse_path_start_time = Date.now();\n        // this.last_pos = [0, pt.x, pt.y, pressure];\n        // this.mouse_path = [[0, pt.x, pt.y, pressure * 4]];\n        appData.drawingCanvas.activateDrawLayer();\n        console.log(\"tooldown\");\n    }\n    toolmove(proX, proY, pressure) {\n        console.log(\"toolmove\");\n        this.canvas_rect.segments[1].point.x = proX\n        this.canvas_rect.segments[2].point.x = proX\n        this.canvas_rect.segments[2].point.y = proY\n        this.canvas_rect.segments[3].point.y = proY\n        // this.canvas_rect.lastSegment.point = new paper.Point(proX, proY);\n    }\n\n    toolup(proX, proY) {\n        if (this.tool_canceled) { return; }\n        if (appData.objectStore.hasRoom(appData.matrixClient.currentRoomId)) {\n            // let [corrected_mouse_path, pos, size] = pathPosSizeCorrection([[0,this.canvas_rect.firstSegment.point.x,this.canvas_rect.firstSegment.point.y,0],[0,this.canvas_rect.lastSegment.point.x,this.canvas_rect.lastSegment.point.y,0]]);\n\n            // let paper_mouse_path = new paper.Path(corrected_mouse_path.map((s) => { return [s[1], s[2]] }));\n\n            let [pos, size, string_path] = paperPathToString(this.canvas_rect);\n            // paper_mouse_path.remove();\n            let version = 2;\n            sendPath(appData.matrixClient.client, appData.matrixClient.currentRoomId,\n                string_path,\n                GetPickerColor(), setAlpha(GetPickerColor(), 0.08),[pos.x, pos.y], [size.width, size.height], this.getStrokeWidth(), true, version);\n        } else {\n            console.log(\"NO ROOM SELECTED TO DRAW IN!\")\n            appData.drawingCanvas.updateDisplay_DEPRECATED();\n        }\n        this.toolcancel();\n    }\n    toolcancel() {\n        console.log(\"CANCEL\");\n        if (this.canvas_rect !== null) {\n            this.canvas_rect.remove();\n            this.canvas_rect = null;\n            this.tool_canceled = true;\n        }\n    }\n    toolpreviewmove(pos){}\n    activate(){}\n    deactivate(){}\n}","export default class NotebookTree {\n    constructor() {\n        this.notebooks = {}\n        this.whiteboards = []\n    }\n    clear() {\n        this.notebooks = {}\n        this.whiteboards = []\n    }\n}","import { hideLoading, showLoading } from \"../main\";\nimport { AutoDiscovery } from \"matrix-js-sdk\";\n\nconst loginContainerTemplate = document.createElement('template');\nloginContainerTemplate.innerHTML = `\n<link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\">\n<style>\n    span {\n        font-size: 3em;\n        white-space: pre;\n        font-weight: 100;\n    }\n    input {\n        width: 100%;\n        padding: 12px 20px;\n        margin: 8px 0;\n        display: inline-block;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n        box-sizing: border-box;\n    }\n    button.submit {\n        width: 100%;\n        background-color: #FFAF50;\n        background-color: #4CAF50;\n        color: white;\n        padding: 14px 20px;\n        margin: 8px 0;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n    }\n</style>\n<div class='center-container' id='login-container'>\n    <p>\n        <span>The Board</span>\n        <span style='font-size: 1em;'> (alpha `+process.env.PACKAGE_VERSION+`)</span>\n    </p>\n    <form action=\"javascript:void(0);\" onsubmit=\"()=>{return false;}\">\n    <label for='username'>Username:</label><br>\n    <input type='text' id='username' name='username' autocomplete=\"username\" placeholder='Your matrix id...'><br>\n    <label for='password'>Password:</label><br>\n    <input type='password' id='password' name='password' autocomplete=\"current-password\" placeholder='your password...'><br>\n    <button id='login-submit' class='submit'>Log in</button>\n    </form>\n    <label for='server'>Server:</label><br>\n    <input type='text' id='server-url' name='server' placeholder='Server url'><br>\n</div>\n`\nexport class LoginContainer extends HTMLElement {\n    constructor() {\n        super();\n    }\n    checkUsername(username) {\n        let re = new RegExp(\"@[a-zA-Z0-9_.+-]+\\\\:[a-zA-Z0-9-]+\\\\.[a-zA-Z0-9-.]+$\")\n        if (re.test(username)) {\n            let serverDomain = username.split(\":\")[1];\n            showLoading(\"Getting homeserver Information for domain \" + serverDomain);\n            AutoDiscovery.findClientConfig(serverDomain)\n                .then((clientConf) => {\n                    hideLoading();\n                    let baseUrl = clientConf[\"m.homeserver\"].base_url;\n                    if (baseUrl) {\n                        this.shadowRoot.querySelector(\"#server-url\").value = baseUrl;\n                    }\n                })\n            return true\n        }\n        return false\n    }\n    hide() {\n        let login = this.shadowRoot.querySelector(\"#login-container\");\n        login.style.display = \"none\"\n    }\n    loginClicked() {\n\n        function checkpwd(pwd) {\n            console.log(\"pwd to check: \", pwd);\n\n            return pwd.length > 1;\n        }\n        function checkServerUrl(baseUrl) {\n            return baseUrl.length > 5\n        }\n        let baseUrl = this.shadowRoot.querySelector(\"#server-url\").value;\n        let username = this.shadowRoot.querySelector(\"#username\").value;\n        let pwd = this.shadowRoot.querySelector(\"#password\").value;\n\n        console.log(\"username to check: \", username);\n        if (checkpwd(pwd) && this.checkUsername(username) && checkServerUrl(baseUrl)) {\n            appData.matrixClient.login(username, pwd, baseUrl, ()=>{this.hide()});\n        } else {\n            showLoading(\"username or password dont have the correct format\")\n        }\n    }\n\n    connectedCallback() {\n        this.attachShadow({ mode: 'open' });\n        let content = loginContainerTemplate.content;\n        content.getElementById(\"login-submit\").onclick = (ev) => { this.loginClicked() }\n        content.getElementById(\"username\").onchange = (el) => { this.checkUsername(el.target.value) }\n        var pwd_input = content.getElementById(\"password\");\n        pwd_input.addEventListener(\"keypress\", function (event) {\n            if (event.key === \"Enter\") {\n                event.preventDefault();\n                document.getElementById(\"login-submit\").click();\n            }\n        });\n        this.shadowRoot.appendChild(content);\n    }\n}\nif (!customElements.get('login-container')) {\n    customElements.define('login-container', LoginContainer);\n}\n\n","\nimport init_input from './input.js'\nimport ObjectStore from './sturctures/object-store'\nimport MatrixBackend from './backend/matrix.js';\nimport PaperCanvas from './paper-canvas'\nimport { init_color_picker } from \"./color-picker\";\nimport init_tool_wheel from \"./tools/tool-wheel\";\nimport init_line_style_selector from \"./tools/line-style-selector\";\nimport \"./components/login-container\";\n\nwindow.appData = {\n    matrixClient: new MatrixBackend(),\n    objectStore: new ObjectStore(),\n    drawingCanvas: new PaperCanvas()\n}\n\nwindow.onload = function () {\n    appData.drawingCanvas.init();\n    init_input(document.getElementById(appData.drawingCanvas.css_id));\n    init_color_picker();\n    init_tool_wheel();\n    init_line_style_selector();\n\n    window.actions.updateRoomList = ()=>{updateRoomList()};\n    window.actions.updateAddRoomList = updateAddRoomList;\n}\nexport function updateRoomList() {\n    let roomTree = appData.matrixClient.updateRoomTree()\n    let leftbarBody = document.getElementById(\"leftbar-body\")\n    leftbarBody.innerHTML = ''\n    for (let noteb of Object.keys(roomTree.notebooks)) {\n        let notebookRoom = appData.matrixClient.client.getRoom(noteb)\n        leftbarBody.appendChild(createNotebook(notebookRoom.name, roomTree.notebooks[noteb]))\n    }\n    for (let whiteboard of roomTree.whiteboards) {\n        leftbarBody.appendChild(createDOMWhiteboard(whiteboard, '#eee'))\n    }\n    // let id = room.roomId;\n    // var roomButton = document.createElement(\"div\");\n    // console.log(id)\n    // roomButton.onclick = function (a) { console.log(a); loadRoom(id); };\n    // roomButton.classList.add(\"room-button\");\n    // var roomText = document.createElement(\"p\");\n    // roomText.innerText = visibleRooms[r].name;\n    // roomButton.appendChild(roomText);\n    // leftbarBody.insertBefore(roomButton, leftbarBody.firstChild);\n}\nfunction createNotebook(name, whiteboards) {\n    let notebook = document.createElement(\"div\")\n    let header = document.createElement(\"div\")\n    let list = document.createElement(\"div\")\n\n    header.innerHTML = name;\n    header.classList.add(\"notebook-header\");\n    let color = Color.random().toCSS()\n    header.style.borderLeftColor = color;\n\n    function getExpandHeight(list) {\n        let height = 0\n        for (let l of list.children) {\n            height += l.getBoundingClientRect().height;\n        }\n        return height;\n    }\n    header.onclick = function (a) {\n        if (list.style.height == \"\") { list.style.height = getExpandHeight(list) }\n        if (list.getBoundingClientRect().height != 0) { list.style.height = 0 }\n        else { list.style.height = getExpandHeight(list) }\n    };\n    notebook.appendChild(header);\n\n    for (let id of whiteboards) {\n        list.appendChild(createDOMWhiteboard(id, color))\n    }\n    list.classList.add(\"notebook-list\");\n    // list.style.height = getExpandHeight(list);\n    notebook.appendChild(list);\n\n    return notebook;\n}\nfunction createDOMWhiteboard(id, color) {\n    let whiteboardButton = document.createElement(\"button\")\n    let room = appData.matrixClient.client.getRoom(id);\n    whiteboardButton.onclick = function (a) { console.log(a); loadRoom(id); };\n    whiteboardButton.classList.add(\"room-button\");\n    whiteboardButton.style.borderLeftColor = color;\n    whiteboardButton.innerHTML = room.name + \"<br><span style='font-size:0.5em;color:#000'>\" + room.roomId + \"</span>\";\n    return whiteboardButton;\n}\nexport async function updateAddRoomList() {\n    let visibleRooms = appData.matrixClient.client.getVisibleRooms();\n    let addRoomBody = document.getElementById(\"add-room-list\");\n    addRoomBody.innerHTML = \"\"\n    for (let r of visibleRooms) {\n        // let room = visibleRooms[r];\n        console.log(Array.from(r.currentState.events.keys()))\n        if (r.currentState.events.has('m.space.child')\n            || r.currentState.events.has('p.whiteboard.settings')) {\n            continue // only show rooms which are no spaces and are not already a whiteboard\n        }\n        let id = r.roomId;\n        var roomButton = document.createElement(\"div\");\n        roomButton.onclick = async function (a) {\n            console.log(a);\n            a.currentTarget.style.backgroundColor = '#5e5'\n            let room = await makeWhiteboardFromRoom(id);\n            updateAddRoomList();\n            updateRoomList();\n            actions.hideAddRoomMenu();\n        };\n        roomButton.classList.add(\"room-button\");\n        var roomText = document.createElement(\"p\");\n        roomText.innerText = r.name;\n        roomButton.appendChild(roomText);\n        addRoomBody.insertBefore(roomButton, addRoomBody.firstChild);\n    }\n}\nexport function showLoading(msg) {\n    let loading = document.getElementById(\"loading\");\n    loading.style.display = \"block\";\n    let span = document.getElementById(\"loading-span\");\n    span.innerHTML = msg\n}\nexport function hideLoading() {\n    let loading = document.getElementById(\"loading\");\n    loading.style.display = \"none\";\n}\n\n// function cancelRoomLoading() {\n//     return new Promise((resolve, reject) => {\n//         resolve();\n//     });\n// }\nasync function loadRoom(roomId, scrollback_count = -1, allMessages = true) {\n    let drawC = appData.drawingCanvas;\n    console.log(drawC);\n    drawC.clear();\n    drawC.resetOffset();\n    drawC.resetZoom();\n    drawC.setZoom(0.5)\n    showLoading(\"switching Room to: \" + appData.matrixClient.currentRoomId);\n    console.log(\"switching Room to: \" + appData.matrixClient.currentRoomId);\n    document.getElementById('leftbar').classList.remove('no-room-selected');\n    appData.objectStore.addRoom(roomId);\n    appData.matrixClient.currentRoomId = roomId;\n    let s_back = scrollback_count;\n    if (scrollback_count == -1) {\n        if (Object.keys(appData.objectStore.all()).length == 0) { s_back = 300; }\n        else { s_back = 0; }\n    }\n    let room = appData.matrixClient.client.getRoom(roomId);\n    let settings = room.currentState.events.get('p.whiteboard.settings');\n    if (settings.has(\"colorpalette\")) {\n        SetColorPalette(settings.get(\"colorpalette\"))\n    }\n    showLoading(\"load room history\");\n    const dateOptions = { year: 'numeric', month: 'numeric', day: 'numeric', hour: 'numeric' };\n    let scrollBackToken = true\n    let currentScrollbackDate = new Date()\n    let nowDate = new Date();\n    let createDate = new Date(room.currentState.getStateEvents('m.room.create', \"\").event.origin_server_ts);\n    let totalLoaded = 0\n    while (scrollBackToken) {\n        let percent = 1 - ((currentScrollbackDate - createDate) / (nowDate - createDate))\n        let roomLoaded = await appData.matrixClient.scrollback(appData.matrixClient.currentRoomId, s_back, \"Loaded: \" + Math.floor(percent * 100) + \"% (elements: \" + totalLoaded + \")</br> <span style='font-size:10px'>to Date: \" + currentScrollbackDate.toLocaleDateString('de-DE', dateOptions) + \"  Target: \" + createDate.toLocaleDateString('de-DE', dateOptions) + \"</span>\");\n        drawC.updateDisplay_DEPRECATED();\n        currentScrollbackDate = new Date(roomLoaded.timeline[0].event.origin_server_ts);\n        totalLoaded += s_back;\n        scrollBackToken = room.oldState.paginationToken;\n        if (!allMessages) { break; }\n    }\n    drawC.reload();\n    drawC.updateDisplay_DEPRECATED();\n}\n\n\n","import * as sdk from \"matrix-js-sdk\";\nimport { showLoading, hideLoading, updateRoomList } from \"../main\";\nimport NotebookTree from '../sturctures/notebook-tree'\n// import { drawEvent } from '../drawing'\n\nexport default class MatrixBackend {\n    constructor() {\n        this.client = null\n        this.currentRoomId = null\n    }\n\n    updateRoomTree() {\n        let roomTree = new NotebookTree();\n        let dateNow = Date.now()\n        console.log(\"startGettingVisibleRooms\")\n        // return new Promise( (resolve, reject) {\n        let visibleRooms = this.client.getRooms();\n        console.log(\"got all visible rooms\" + (Date.now() - dateNow))\n        let spaces = visibleRooms.filter(r => r.currentState.events.has('m.space.child'))\n\n\n        for (let r in visibleRooms) {\n            let room = visibleRooms[r];\n            console.log(Array.from(room.currentState.events.keys()))\n            if (!room.currentState.events.has('p.whiteboard.settings')) {\n                continue // only show rooms which are marked as whitebaord rooms\n            }\n            let found = spaces.find(spaceRoom => spaceRoom.currentState.events.get('m.space.child').has(room.roomId))\n            if (found) {\n                if (found.roomId in roomTree.notebooks) {\n                    roomTree.notebooks[found.roomId].push(room.roomId)\n                } else {\n                    roomTree.notebooks[found.roomId] = [room.roomId]\n                }\n                console.log(\"whiteboard is in space!: \", found)\n            } else {\n                roomTree.whiteboards.push(room.roomId)\n            }\n        }\n        return roomTree;\n    }\n\n    async createWhiteboard(visibility, whiteboardName) {\n\n        let roomOpt = {\n            // room_alias_name\n            visibility: visibility,\n            invite: [],\n            name: whiteboardName == \"\" ? \"unnamed Whiteboard\" : whiteboardName,\n        }\n        showLoading(\"Creating whiteboard with Name: \" + whiteboardName)\n        let roomCreateData = await appData.matrixClient.client.createRoom(roomOpt);\n        hideLoading();\n        appData.matrixClient.makeWhitebaordFromRoom.bind(appData.matrixClient);\n        return appData.matrixClient.makeWhitebaordFromRoom(roomCreateData.room_id);\n    }\n\n\n\n\n    async makeWhitebaordFromRoom(roomId) {\n        let content = {}\n        let client = appData.matrixClient.client;\n        let stateId = await client.sendStateEvent(roomId, \"p.whiteboard.settings\", content, \"\")\n        showLoading(\"make Room \" + client.getRoom(roomId).name + \"a whiteboard\")\n        let prom = new Promise(function (resolve, reject) {\n            let listenerFunc = function (msg, state, prevEvent) {\n                if (msg.event.event_id == stateId.event_id) {\n                    client.removeListener(\"RoomState.events\", listenerFunc)\n                    resolve()\n                    hideLoading()\n                }\n            }\n            client.on(\"RoomState.events\", listenerFunc);\n        })\n        return prom;\n    }\n\n\n    async login(username, password, baseUrl, loginCallback) {\n        showLoading(\"login with: \" + username + \" on server: \" + baseUrl);\n        this.client = sdk.createClient({\n            baseUrl: baseUrl\n        });\n        appData.matrixClient = this;\n        window.actions.createWhiteboard = this.createWhiteboard;\n        window.actions.scrollback = this.scrollback;\n        this.setupClientConnections();\n        let registeredResult = await this.client.loginWithPassword(username, password, function (err) {\n            if (err instanceof Error) {\n                showLoading(err.message)\n                return;\n            } else {\n                loginCallback();\n            }\n        })\n        console.log(registeredResult);\n        document.getElementById(\"userIdLabel\").innerHTML = registeredResult.user_id;\n        // document.getElementById(\"userIdLabel\").innerHTML = registeredResult.user_id;\n        showLoading(\"start client\");\n        let startedResult = await this.client.startClient({ initialSyncLimit: 0, lazyLoadMembers: true });\n        showLoading(\"initial sync\");\n    }\n\n\n\n    setupClientConnections() {\n        this.client.on(\"sync\", function (state, prevState, data) {\n            switch (state) {\n                case \"ERROR\":\n                    // update UI to say \"Connection Lost\"\n                    break;\n                case \"SYNCING\":\n                    // update UI to remove any \"Connection Lost\" message\n                    break;\n                case \"PREPARED\":\n                    // the client instance is ready to be queried.\n                    updateRoomList()\n                    showLoading(\"Select a whiteboard or create a new one\")\n                    break;\n            }\n        });\n        this.client.on(\"Room.localEchoUpdated\", function (msg, room, oldId, newStatus) {\n            if (msg.getType() === \"p.whiteboard.object\" && msg.status === \"sent\") {\n                let item = project.getItem({ class: \"Path\", match: function (item) { return item.data.id == oldId } })\n                if (item) {\n                    item.data.id = msg.event.event_id\n                }\n                appData.objectStore.add(msg.event);            }\n        })\n        // var replacedEvents = new Set();\n        this.client.on(\"Room.timeline\", function (msg, room, toStartOfTimeline) {\n            if (msg.isRedacted()) {\n                console.log(\"skipped redacted evpped redacted event\")\n                return;\n            }\n            if (msg.getType() == \"p.whiteboard.object\") {\n                // ANIMATED toggle\n                appData.drawingCanvas.drawEvent(msg.event, Date.now() - msg.getDate().getTime() < 200000);\n                // }\n                if (msg.status == null) {\n                    //event is not sending but loaded from scrollback\n                    appData.objectStore.add(msg.event);\n                }\n            }\n            if (msg.getType() == \"m.room.redaction\") {\n                // this is debateable. When an event is super slow the canvas will still show it until some other event happens to trigger a redraw\n                // if (Date.now() - msg.event.origin_server_ts < 200000) {\n                appData.objectStore.redactById(msg.event.redacts, msg.event.room_id);\n                // }\n            }\n            if (msg.getType() !== \"m.room.message\") {\n                return; // only use messages\n            }\n        });\n    }\n\n\n    scrollback(roomId, scrollback_count = 200, loadingMsg = null) {\n        console.log(\"load scrollback for: \" + roomId);\n        console.log(\"load scrollback with element count: \" + scrollback_count);\n        if (loadingMsg) { showLoading(loadingMsg); } else {\n            showLoading(\"load \" + scrollback_count + \" elements from message history\");\n        }\n        let client = this.client;\n        let curRoomId = this.currentRoomId;\n        return new Promise(function (resolve, reject) {\n            if (scrollback_count == 0) {\n                hideLoading();\n                resolve(client.getRoom(curRoomId));\n            }\n            client.scrollback(client.getRoom(roomId), scrollback_count)\n                .then((room) => {\n                    console.log(\"scrollback loaded\");\n                    hideLoading();\n                    resolve(room);\n                });\n        });\n    }\n}","// import { currentRoomId } from \"../main\";\nexport default class ObjectStore {\n    constructor() {\n        // this.redacted = new Set();\n        this.data = {\n            \"exampleroom\": {\n                \"redacted\": new Set(),\n                \"all\": [],\n                \"allDict\": {},\n                \"user\": [],\n                \"chunk\": [],\n            }\n        }\n    }\n    currentRoom() {\n        return this.data[appData.matrixClient.currentRoomId]\n    }\n    hasRoom(roomId) {\n        return roomId in this.data;\n    }\n    addRoom(roomId) {\n        if (this.hasRoom(roomId)) {\n            console.log(\"room already exists\")\n        }\n        else {\n            console.log(\"add room \" + roomId + \"to store\");\n            this.data[roomId] = {\n                \"redacted\": new Set(),\n                \"all\": [],\n                \"allDict\": {},\n                \"user\": {},\n                \"chunk\": [],\n            }\n        }\n    }\n    // addToCurrent(obj) {\n    //     if (!this.currentRoom().redacted.has(obj.event_id)) {\n    //         this.currentRoom().all.push(obj);\n    //     }\n    // }\n    add(obj) {\n        if (!obj.room_id in this.data) {\n            this.addRoom(obj.room_id);\n        }\n        let room = this.data[obj.room_id];\n        // console.log(\"adding obj that already exists: \", room.all.some(el => el.event_id == obj.event_id));\n        room.allDict[obj.event_id] = obj;\n        // if (!room.redacted.has(obj.event_id)) {\n        // room.all.push(obj);\n        // }\n    }\n    allSorted() {\n        if (appData.matrixClient.currentRoomId in this.data) {\n            let begin_sort = Date.now();\n            let dic = this.currentRoom().allDict;\n            let allList = Object.keys(dic).map(key => dic[key]);\n            allList.sort(function (first, second) {\n                return first.origin_server_ts - second.origin_server_ts;\n            });\n            console.log(\"sorted all events: \", Date.now() - begin_sort, \"ms\")\n            return allList;\n            return this.currentRoom().all;\n        } else {\n            // If there is not current room set, the default behaviour is en empty list -> canvas gets cleared\n            return []\n        }\n    }\n    all() {\n        if (appData.matrixClient.currentRoomId in this.data) {\n            return this.currentRoom().allDict;\n        } else {\n            // If there is not current room set, the default behaviour is en empty list -> canvas gets cleared\n            return {}\n        }\n    }\n    getById(id) {\n        let found = Object.values(this.all()).find(el => el.event_id == id);\n        return found;\n    }\n    // redactByIdInCurrent(id, remove = true) {\n    //     this.currentRoom().redacted.add(id);\n    //     if (remove) {\n    //         this.currentRoom().all = this.currentRoom().all.filter(e => e.event_id !== id);\n    //     }\n    // }\n    redactById(id, roomId, remove = true) {\n        if (!this.hasRoom(roomId)) { this.addRoom(roomId) }\n        let room = this.data[roomId];\n        // room.redacted.add(id);\n        if (remove) {\n            if (id in room.allDict) {\n                delete room.allDict[id];\n                let item = paper.project.getItem({ class: \"Path\", match: function (item) { return item.data.id == id } })\n                if (item) { item.remove(); } else { console.log(\"could not find item for id: \", id) }\n            } else {\n                console.log(\"unecassary redact called for id: \", id)\n            }\n        }\n    }\n    // redact_and_remove_by_id(id){\n    //     this.redacted.add(id);\n    //     this.objects[\"all\"] = this.objects[\"all\"].filter(e => e.event_id !== id);\n    // }\n    // all_region(x,y,width,height){\n    //     //TODO\n    //     var ret = [];\n    //     this.objects[\"all\"].forEach(obj => {\n    //         pos = [obj.objpos.slice(\" \").map(x => {return parseInt(x)})];\n    //         size = [obj.objsize.slice(\" \").map(x => {return parseInt(x)})];\n    //         if obj.\n    //         ret.push()\n    //     });\n    // }\n}","import { Point } from 'paper'\nimport { tools, activeTool } from '../input';\nimport { setActiveTool } from '../input';\nimport { mousePathToString, paperPathToString, pathPosSizeCorrection, setAlpha } from \"../helper\";\n\nexport default function init_tool_wheel() {\n  let wheelContainer = document.getElementById(\"tool-wheel\");\n  let colorPickerCanvas = document.getElementById('color-picker-canvas');\n  let boundingrect = colorPickerCanvas.getBoundingClientRect()\n  let center = new Point(boundingrect.width, boundingrect.height)\n  // center = new Point(208, 208);\n  center = center.multiply(0.5);\n  let children = document.querySelectorAll(\".tool-elements\");\n  // let buttons = document.querySelectorAll(\"#tool-wheel button\");\n  let settingsButton = document.getElementById(\"settings-button\");\n  settingsButton.style.left = center.x\n  settingsButton.style.bottom = center.y\n  let rad = center.x + 15;\n  let offset = -Math.PI / 10;// -Math.PI / 4;\n  for (let i = 0; i < children.length; i++) {\n    // all units in em\n    console.log(children[i].tagName);\n    let child = children[i];\n    let angle = i * Math.PI / 7 + offset;\n    let pos = new Point(Math.sin(angle) * rad, Math.cos(angle) * rad);\n    child.style.left = center.x + pos.x;\n    child.style.bottom = center.y + pos.y;\n  }\n  for (let b of children) {\n    if (!(b.id in tools)) { continue }\n    b.onclick = function (buttonEv) {\n      for (let btn of children) {\n        btn.classList.remove('active');\n      }\n      activeTool.deactivate()\n      setActiveTool(b.id);\n      activeTool.activate()\n      b.classList.add('active');\n\n    }\n    if (activeTool == tools[b.id]) {\n      b.classList.add('active');\n    }\n  }\n}"],"names":["paperPathToString","path","movedPath","clone","boundingRect","bounds","position","subtract","topLeft","paper_path_string","s","segments","point","x","toFixed","y","handleIn","handleOut","remove","size","trim","dist","p","q","Math","sqrt","parsePoint","string","arr","split","paper","Point","parseFloat","setAlpha","color","opacity","_opStr","round","min","max","toString","toUpperCase","length","PaperCanvas","constructor","this","css_id","displayPaths","toolLayer","drawLayer","canvas","drawEvent","event","animated","updateDisplay","drawC","appData","drawingCanvas","V1","points","p_path","objpos","offset","returnval","i","time","lineWidth","push","parsePath","content","pos","objsize","objcolor","asyncAddPathV1","drawBoundingBox","addPathV1","event_id","updateDisplay_DEPRECATED","objtype","version","filter","e","seg","Segment","parseBezierPath","strokeWidth","closed","fillColor","objFillColor","asyncAddPathV2","addPathV2","V2","activateToolLayer","activate","activateDrawLayer","init","document","getElementById","setup","install","window","project","activeLayer","Layer","offset_delta","view","center","resetOffset","setOffset","getZoom","zoom","factor","zoomOrigin","scale","zoomOriProj","viewToProject","setZoom","currentViewCenter","resetZoom","console","log","id","dashArray","tween","dashOffset","then","Path","strokeColor","strokeCap","data","moveTo","lineTo","dispPath","clearDisplayPaths","forEach","clear","l","layers","removeChildren","box","reload","starttime","Date","now","objectStore","allSorted","obj","type","getTransformedPointer","sendPath","client","room","string_path","floor","random","sendEvent","err","res","lastEvent","userId","matrixClient","getUserId","sortedEvents","sender","replaceEvent","idToReplace","newContent","currentRoomId","redactEvent","t","actions","redactLastAction","roomId","formSubmit","preventDefault","replaceLastEvent","moveLastEvent","ev","newPoint","add","showAddRoomMenu","updateAddRoomList","style","display","hideAddRoomMenu","showSettingsMenu","settingsMenu","getRoom","innerHTML","hideSettingsMenu","toggleLeftBar","body","footer","getBoundingClientRect","height","_tool_stroke_width_index","GetToolStrokeWidthIndex","colorPickerSvg","GetPickerColor","getColor","toCSS","ColorPicker","colors","darkColors","map","c","multiply","outline","colorPaths","selectedColor","COLOR_PICKER_BORDER","innerCircle","middleCircle","redraw","cent","divide","radi","width","circleBg","shadowBlur","shadowColor","create_segment_ring","circleInner","setColorPalette","palette","concat","innerRad","outerRad","index","count","PI","paths","deg","deg2","create_segment","onMouseDown","selectColor","startDeg","endDeg","getPointFromDeg","rad","sin","cos","middleDeg","arcTo","closePath","index_arr","bringToFront","ToolPen","marker","isMarker","mouse_path","mouse_path_last_time","last_pos","tool_canceled","strokeWidthOptions","previewItem","previewPaths","previewPathTween","getStrokeWidth","getStrokeColor","tooldown","proX","proY","pressure","mouse_path_start_time","visible","prev","colorAlpha","Color","alpha","toolmove","time_delta","currentPos","currentPosPoint","smooth","toolpreviewmove","Circle","applyMatrix","scaling","toolup","hasRoom","corrected_mouse_path","posMin","Number","MAX_VALUE","posMax","correctedPoints","pathPosSizeCorrection","paper_mouse_path","simplify","toolcancel","deactivate","tools","removedElementsArray","idsToDelete","addItemsFromPoint","testPoint","hitOptions","stroke","tolerance","match","hitRes","item","hitResult","hitTest","getById","markedForDeletion","itemId","w","canvas_line","pt","lastSegment","canvas_rect","Rectangle","activeTool","over_handler","enter_handler","touchesCache","touchesCacheBegin","touchZoomCache","touchPanCache","DOMPoint","handleTouchType","NotebookTree","notebooks","whiteboards","loginContainerTemplate","createElement","LoginContainer","HTMLElement","super","checkUsername","username","RegExp","test","serverDomain","showLoading","AutoDiscovery","clientConf","hideLoading","baseUrl","base_url","shadowRoot","querySelector","value","hide","loginClicked","pwd","checkpwd","checkServerUrl","login","connectedCallback","attachShadow","mode","onclick","onchange","el","target","addEventListener","key","click","appendChild","updateRoomList","roomTree","updateRoomTree","leftbarBody","noteb","Object","keys","notebookRoom","createNotebook","name","whiteboard","createDOMWhiteboard","notebook","header","list","classList","getExpandHeight","children","borderLeftColor","a","whiteboardButton","async","scrollback_count","allMessages","addRoom","s_back","all","settings","currentState","events","get","has","SetColorPalette","dateOptions","year","month","day","hour","scrollBackToken","currentScrollbackDate","nowDate","createDate","getStateEvents","origin_server_ts","totalLoaded","percent","roomLoaded","scrollback","toLocaleDateString","timeline","oldState","paginationToken","loadRoom","visibleRooms","getVisibleRooms","addRoomBody","r","Array","from","roomButton","currentTarget","backgroundColor","makeWhiteboardFromRoom","roomText","innerText","insertBefore","firstChild","msg","customElements","define","dateNow","getRooms","spaces","found","find","spaceRoom","visibility","whiteboardName","roomOpt","invite","roomCreateData","createRoom","makeWhitebaordFromRoom","bind","room_id","stateId","sendStateEvent","Promise","resolve","reject","listenerFunc","state","prevEvent","removeListener","on","password","loginCallback","createWhiteboard","setupClientConnections","registeredResult","loginWithPassword","Error","message","user_id","startClient","initialSyncLimit","lazyLoadMembers","prevState","oldId","newStatus","getType","status","getItem","class","toStartOfTimeline","isRedacted","getDate","getTime","redactById","redacts","loadingMsg","curRoomId","Set","currentRoom","allDict","begin_sort","dic","allList","sort","first","second","values","onload","element","onpointerdown","project_pt","offsetX","offsetY","pointerType","onpointermove","buttons","findIndex","pointerId","cx","cy","canvasZoom","start1","clientX","clientY","start2","current1","current2","distStart","distCurrent","currentCenter","startCenter","panDistDelta","pinchDistDelta","abs","currentZoomFactor","offsetDiff","handlePanZoom","movementX","movementY","onpointerup","cache_event","onwheel","ctrlKey","wheelDeltaY","scroll_speed","wheelDeltaX","onpointerover","onpointerenter","passive","boundingrect","querySelectorAll","settingsButton","left","bottom","tagName","child","angle","b","buttonEv","btn","init_tool_wheel","updateVisiblePreviewItem","previewItems","btnEv","init_line_style_selector"],"sourceRoot":""}